{  
    // 这里需要根据不同语言进行修改后缀，这里是 .js,如果是其他语言只要把js改成例如 lua、php等
    "scope": "source.lua - keyword.control.lua - constant.language.lua - string",

    "completions":
    [
        { "trigger": "init(appid, rotate) \t初始化  rotate: 屏幕方向，0 - 竖屏，1 - Home键在右边，2 - Home键在左边", "contents": "init(${0:appid}, ${1:1})" },
        { "trigger": "touchDown(index, x, y) \t触摸按下", "contents": "touchDown(${0:1}, x, y)" },
        { "trigger": "touchMove(index, x, y) \t触摸移动", "contents": "touchMove(${0:1}, x, y)" },
        { "trigger": "touchUp(index, x, y) \t触摸抬起", "contents": "touchUp(${0:1}, x, y)" },
        { "trigger": "catchTouchPoint(touchCount) return x,y | results \t获取用户点击坐标", "contents": "local ${0:x, y} = catchTouchPoint()" },
        { "trigger": "findColor({left, top, right, bottom}, color0, degree, hdir, vdir, priority) return x, y \t区域多点找色", "contents": "local x, y = findColor($0)" },
        { "trigger": "findColors({left, top, right, bottom}, color0, degree, hdir, vdir, priority) return points \t区域多点找色", "contents": "local points = findColors($0)" },
        { "trigger": "findColorInRegionFuzzy(color, degree, x1, y1, x2, y2,hdir,vdir) return x, y \t模糊区域找色（推荐使用findColor代替）", "contents": "local x, y = findColorInRegionFuzzy($0)" },
        { "trigger": "findMultiColorInRegionFuzzy2(color, {{posandcolor}}, degree, x1, y1, x2, y2,hdir,vdir) return x, y \t区域多点找色（推荐使用findColor代替）", "contents": "local x, y = findMultiColorInRegionFuzzy2($0)" },
        { "trigger": "findMultiColorInRegionFuzzyExt(color, posandcolor, degree, x1, y1, x2, y2,hdir,vdir) return points \t高级区域多点找色（推荐使用findColors代替）", "contents": "local points = findMultiColorInRegionFuzzyExt($0)" },
        { "trigger": "findMultiColorInRegionFuzzyExt2(color, {{posandcolor}}, degree, x1, y1, x2, y2,hdir,vdir) return points \t高级区域多点找色（推荐使用findColors代替）", "contents": "local points = findMultiColorInRegionFuzzyExt2($0)" },
        { "trigger": "getColor(x, y) return color \t获取屏幕某点颜色值", "contents": "local color = getColor(${0:x}, y)" },
        { "trigger": "getColorRGB(x, y) return color_r, color_g, color_b \t获取颜色RGB值", "contents": "local r, g, b = getColorRGB($0, y)" },
        { "trigger": "findImageInRegionFuzzy(picpath, degree, x1, y1, x2, y2, alpha) return x, y \t模糊区域找图(不推荐,推荐用findColor或findColors)", "contents": "local x, y = findImageInRegionFuzzy($0)" },
        { "trigger": "snapshot(picname, x1, y1, x2, y2, quality) \t截图: 截取屏幕中指定区域的图像并生成指定格式的图片文件", "contents": "snapshot($0)" },
        { "trigger": "keepScreen(flag) \t保持屏幕", "contents": "keepScreen(${0:true})" },
        { "trigger": "inputText(string) \t向输入框中输入文本: #CLEAR# 删除输入框中的文字, #ENTER# 回车", "contents": "inputText($0)" },
        { "trigger": "createOcrDict(dict) return index \t加载自定义的点阵字库", "contents": "local dict = createOcrDict($0)" },
        { "trigger": "ocrText(index, x1, y1, x2, y2, {\"c0-c1\"} , sim, flag, dir) return result \t文字点阵化识别", "contents": "local txt = ocrText($0)" },
        { "trigger": "createOCR({ type = \"tesseract\", mode = mode, path = path, lang = lang}) return ocr, msg \t载入高级文字识别字库(集成tesserOCR)", "contents": "local ocr, msg = createOCR({type=\"tesseract\", path=\"res/\", lang=\"$0\"})" },
        { "trigger": "ocr:getText({ psm = psm, rect = {x1, y1, x2, y2}, diff = {diff}, data = data, whitelist = whitelist, blacklist = blacklist }) return code, text \t使用已载入的高级文字识别字库进行识别", "contents": "ocr:getText($0)" },
        { "trigger": "ocr:release() \t主动释放OCR字库，避免内存峰值过高导致被系统强杀 ", "contents": "ocr:release()" },
        { "trigger": "binarizeImage({ rect = {x1, y1, x2, y2}, diff = {diff} })\t 二值化图片转换为table", "contents": "binarizeImage(rect = ${1:rect}, diff = ${2:diff})" },
        { "trigger": "runApp(appid) return flag \t 运行应用", "contents": "runApp(${1:appid})" },
        { "trigger": "closeApp(appid) \t 关闭应用", "contents": "closeApp(${1:appid})" },
        { "trigger": "appIsRunning(appid) return flag \t 检测应用是否运行", "contents": "appIsRunning(${1:appid})" },
        { "trigger": "isFrontApp(appid) return flag \t 判断是否为前台应用", "contents": "isFrontApp(${1:appid})" },
        { "trigger": "frontAppName() return appid \t 获取前台应用识别ID", "contents": "local appid = frontAppName()" },
        { "trigger": "showUI(ui_json) return ret,results \t 显示一个自定义的界面，用来接收用户相关的自定义配置", "contents": "local ret,results = showUI($0)" },
        { "trigger": "getUIContent(path) return content \t 获取json文件(自定义UI,UI目录下)的内容", "contents": "local content = getUIContent($0)" },
        { "trigger": "resetUIConfig(file) \t 重置UI默认选项", "contents": "resetUIConfig($0)" },
        { "trigger": "getScreenSize() return width,height \t 获取屏幕分辨率", "contents": "${1:width,height} = getScreenSize()" },
        { "trigger": "setScreenScale(width, height, scale) \t 设置屏幕缩放", "contents": "setScreenScale(width, height, scale)" },
        { "trigger": "mTime() return t \t 获取Unix时间戳, 从1970年到现在经过的毫秒数", "contents": "local ${1:t} = mTime()" },
        { "trigger": "getNetTime() return t \t 获取网络时间, 获取GMT时区从1970年到现在经过的秒数 ", "contents": "local t = getNetTime()" },
        { "trigger": "pressHomeKey() \t 模拟主屏幕按键", "contents": "pressHomeKey()" },
        { "trigger": "doublePressHomeKey() \t 双击HOME键", "contents": "doublePressHomeKey()" },
        { "trigger": "pressKey(keyname,mode) return ret \t 导航栏按键", "contents": "pressKey(${1:'BACK'},false)" },
        { "trigger": "setWifiEnable(flag) return ret \t 设置无线局域网开关", "contents": "setWifiEnable(${1:true})" },
        { "trigger": "setAirplaneMode(flag) return ret \t 设置飞行模式开关", "contents": "setAirplaneMode(${1:true})" },
        { "trigger": "setBTEnable(flag) return ret \t 设置蓝牙开关", "contents": "setBTEnable(${1:true})" },
        { "trigger": "lockDevice() \t 锁定设备", "contents": "lockDevice()" },
        { "trigger": "unlockDevice() \t 解锁设备", "contents": "unlockDevice()" },
        { "trigger": "deviceIsLock() return flag \t 设备锁定状态", "contents": "deviceIsLock()" },
        { "trigger": "vibrator() \t 手机振动", "contents": "vibrator()" },
        { "trigger": "resetIDLETimer() \t 重置锁屏时间", "contents": "resetIDLETimer()" },
        { "trigger": "resetScreenScale() \t 取消屏幕缩放", "contents": "resetScreenScale()" },
        { "trigger": "playAudio(file) \t 播放音频", "contents": "playAudio(${1:file})" },
        { "trigger": "stopAudio() \t 停止播放音频", "contents": "stopAudio()" },
        { "trigger": "setTimer(time,func,arg1,arg2,...) \t 规定时间之后调用指定函数", "contents": "setTimer($0)" },
        { "trigger": "setSysConfig(key,value) \t 设置系统参数", "contents": "setSysConfig($0)" },
        { "trigger": "mSleep(interval) \t 延时", "contents": "mSleep($0)" },
        { "trigger": "toast(text) \t 提示", "contents": "toast(\"$0\")" },
        { "trigger": "dialog(text, time) \t 提示框", "contents": "dialog(\"$0\", 0)" },
        { "trigger": "dialogRet(text, cbtn, btn1, btn2, time) return choice \t 带按钮的对话框", "contents": "local c = dialogRet(\"$0\", \"\", \"\", \"\", 0)" },
        { "trigger": "dialogInput(title, format, btn) return text_a, text_b \t 带参数的对话框", "contents": "local text = dialogInput(\"$0\", \"\", \"\")" },
        { "trigger": "sysLog(text) \t 系统日志", "contents": "sysLog(\"$0\")" },
        { "trigger": "fileLogWrite(file,date,tag,msg) \t 输出日志到文件", "contents": "fileLogWrite(\"$0\",1,\"INFO\",\"\")" },
        { "trigger": "getCloudContent(key,token,default_msg) return content, err \t 获取云端自定义公告", "contents": "local content, err = getCloudContent(\"$0\", \"此处十六位调试口令\", \"默认值\")" },
        { "trigger": "setStringConfig(key,string) \t 存字符串", "contents": "setStringConfig(\"$0\",\"\")" },
        { "trigger": "getStringConfig(key,default_string) \t 取字符串", "contents": "local str = getStringConfig(\"$0\",\"\")" },
        { "trigger": "setNumberConfig(key,number) \t 存入数值", "contents": "setNumberConfig(\"$0\", 0)" },
        { "trigger": "getNumberConfig(key,default_num) \t 读取数值", "contents": "local num = getNumberConfig(\"$0\", 0)" },
        { "trigger": "readPasteboard() \t 读取剪贴板", "contents": "local ${1:pb} = readPasteboard()" },
        { "trigger": "writePasteboard(text) \t 写入剪贴板", "contents": "writePasteboard(\"$0\")" },
        { "trigger": "lua_exit() \t 退出脚本执行", "contents": "lua_exit()" },
        { "trigger": "lua_restart() \t 重载脚本", "contents": "lua_restart()" },
        { "trigger": "onBeforeUserExit() \t 脚本运行终止回调", "contents": "function onBeforeUserExit()\n\t$0\nend" },
        { "trigger": "getEngineVersion() return ver \t 获取脚本引擎的版本号", "contents": "local ${1:ver} = getEngineVersion()" },
        { "trigger": "getOSType() return ostype \t 获取系统类型, android系统返回“android”,iOS系统返回“iOS”", "contents": "local ${1:ver} = getOSType()" },
        { "trigger": "isPrivateMode() return ver \t 获取系统环境类型, 1-越狱/ROOT环境；0-免越狱/免ROOT环境", "contents": "isPrivateMode()" },
        { "trigger": "getSystemProperty(key) return value \t 获取系统常量属性", "contents": "local value = getSystemProperty('$0')" },
        { "trigger": "getLocalInfo() return lang \t 获取当前系统语言属性", "contents": "local ${1:lang} = getLocalInfo()" },
        { "trigger": "getUserID() return uid \t 获取用户ID", "contents": "local ${1:uid} = getUserID()" },
        { "trigger": "getScriptID() return sid \t 获取脚本ID", "contents": "local ${1:sid} = getScriptID()" },
        { "trigger": "getScreenDPI() return dpi \t 获取当前设备屏幕DPI", "contents": "local ${1:dpi} = getScreenDPI()" },
        { "trigger": "getDeviceIMEI() return imei \t 获取当前设备IMEI码", "contents": "local ${1:imei} = getDeviceIMEI()" },
        { "trigger": "getDeviceIMSI() return imsi \t 获取当前设备IMSI码", "contents": "local ${1:imsi} = getDeviceIMSI()" },
        { "trigger": "getDeviceUUID() return uuid \t 获取当前设备UUID", "contents": "local ${1:uuid} = getDeviceUUID()" },
        { "trigger": "getBatteryLevel() return charge,level \t 获取电池状态", "contents": "local ${1:charge},level = getBatteryLevel()" },
        { "trigger": "getScreenDirection() return ret \t 获取屏幕方向, Android:0-竖屏, 1-橫屏; iOS:0-竖屏，1-横屏(Home右），2-横屏(Home左)，-1(Unknow)", "contents": "local ${1:ret} = getScreenDirection()" },
        { "trigger": "getUserCredit() return buyState,validTime,res \t 获取用户付费类型和套餐剩余时间", "contents": "local buyState,validTime,res=getUserCredit()" },
        { "trigger": "getRuntimeMode() return mode \t 获取脚本运行模式（安卓专用）, 0 - 通用模式（当做“免root免激活”处理）,1 - 低版本兼容模式（当做“免root免激活”处理）,2 - 极客模式（root或者激活）", "contents": "local ${1:mode} = getRuntimeMode()" },
        { "trigger": "getProduct() return product_id \t 获取当前运行产品", "contents": "local product_id = getProduct()" },
        { "trigger": "createHUD() return id \t 创建HUD内容", "contents": "local ${1:id} = createHUD()" },
        { "trigger": "showHUD(id,text,size,color,bg,pos,x,y,width,height) \t 显示HUD内容", "contents": "showHUD(${1:id},\"\",18,\"\",\"\",0,x,y,width,height)" },
        { "trigger": "hideHUD(id) \t 隐藏HUD内容", "contents": "hideHUD(${1:id})" },
        { "trigger": "asyncExec({ type, immediate, url, headers, content, callback }) \t 异步网络请求", "contents": "asyncExec({ \n\ttype = \"httpget\", -- [string]    指定httpget类型\n\timmediate = false, -- [bool] 默认false, 设置true会独立开启线程执行任务\n\turl = urlencode(\"$0\"),-- [string]    请求的URL地址，出现中文字符时需要使用urlencode进行编码\n\tcallback = function (result)\n\t\t--返回数据格式: { code = [int]错误码, data = [string]服务器返回数据 }\n\t\t-- code -1:  请求出错  -2:  请求超时  -3:  强制关闭  其他: 同http status code\n\t\t-- 注意: 虽然请求会异步执行, 但回调函数依然在lua主线程执行, 不要在回调里执行其他阻塞操作\n\t\t\n\tend\n})" },
        { "trigger": "setUIOrientation(mode) 设置UI方向和HUD方向", "contents": "setUIOrientation(${1:0})" },
        { "trigger": "os.time()\t获取系统时间，单位秒", "contents": "os.time()" },
        ///////////////////////////////2.0引擎////////////////////////////////
        { "trigger": "log(msg)\t 输出日志到控制台 \t| 2.0引擎", "contents": "log('$0')" },
        { "trigger": "printf(format, ...) \t 格式化输出日志到控制台 | 2.0引擎", "contents": "printf('$0')" },
        { "trigger": "sleep(timeMs) \t 休眠、暂停运行 | 2.0引擎", "contents": "sleep($0)" },
        { "trigger": "os.netTime() return time \t 获取网络时间 | 2.0引擎", "contents": "local ${1:curTime} = os.netTime()" },
        { "trigger": "os.milliTime() return time \t 获取毫秒级别本地时间 | 2.0引擎", "contents": "local ${1:curTime} = os.milliTime()" },
        { "trigger": "Point.ZERO \t 零点坐标 | 2.0引擎", "contents": "Point.ZERO" },
        { "trigger": "Point.INVALID \t 无效坐标 | 2.0引擎", "contents": "Point.INVALID" },
        { "trigger": "Point \t Point类 | 2.0引擎", "contents": "Point($0)" },
        { "trigger": "Size.ZERO \t 零尺寸 | 2.0引擎", "contents": "Size.ZERO" },
        { "trigger": "Size.INVALID \t 无效尺寸 | 2.0引擎", "contents": "Size.INVALID" },
        { "trigger": "Size \t 尺寸类 | 2.0引擎", "contents": "Size($0)" },
        { "trigger": "Rect.ZERO \t 零矩阵 | 2.0引擎", "contents": "Rect.ZERO" },
        { "trigger": "Rect \t 矩阵类 | 2.0引擎", "contents": "Rect($0)" },
        { "trigger": "Color3B \t 颜色值类(整数型) | 2.0引擎", "contents": "Color3B()" },
        { "trigger": "Color3F \t 颜色值类(浮点型) | 2.0引擎", "contents": "Color3F()" },
        { "trigger": "xmod.PLATFORM \t 当前运行系统平台标识 | 2.0引擎", "contents": "xmod.PLATFORM" },
        { "trigger": "xmod.PLATFORM_IOS \t  取值: string 'iOS' | 2.0引擎", "contents": "xmod.PLATFORM_IOS" },
        { "trigger": "xmod.PLATFORM_ANDROID \t 取值: string 'Android' | 2.0引擎", "contents": "xmod.PLATFORM_ANDROID" },
        { "trigger": "xmod.PROCESS_MODE \t 当前引擎运行模式 | 2.0引擎", "contents": "xmod.PROCESS_MODE" },
        { "trigger": "xmod.PROCESS_MODE_EMBEDDED \t Android通用模式/iOS免越狱 | 2.0引擎", "contents": "xmod.PROCESS_MODE_EMBEDDED" },
        { "trigger": "xmod.PROCESS_MODE_STANDALONE \t Android极客模式/iOS越狱 | 2.0引擎", "contents": "xmod.PROCESS_MODE_STANDALONE" },
        { "trigger": "xmod.PRODUCT_CODE \t 当前运行产品平台标识 | 2.0引擎", "contents": "xmod.PRODUCT_CODE" },
        { "trigger": "xmod.PRODUCT_CODE_DEV \t 开发助手（双平台） | 2.0引擎", "contents": "xmod.PRODUCT_CODE_DEV" },
        { "trigger": "xmod.PRODUCT_CODE_XXZS \t 叉叉助手（双平台） | 2.0引擎", "contents": "xmod.PRODUCT_CODE_XXZS" },
        { "trigger": "xmod.PRODUCT_CODE_IPA \t 叉叉IPA精灵（仅iOS） | 2.0引擎", "contents": "xmod.PRODUCT_CODE_IPA" },
        { "trigger": "xmod.PRODUCT_CODE_KUWAN \t 叉叉酷玩（仅Android） | 2.0引擎", "contents": "xmod.PRODUCT_CODE_KUWAN" },
        { "trigger": "xmod.PRODUCT_CODE_SPIRIT \t 叉叉小精灵（仅Android） | 2.0引擎", "contents": "xmod.PRODUCT_CODE_SPIRIT" },
        { "trigger": "xmod.VERSION_CODE \t 当前脚本引擎版本号，5位固定长度数字，如20240 | 2.0引擎", "contents": "xmod.VERSION_CODE" },
        { "trigger": "xmod.VERSION_NAME \t 当前脚本引擎版本名，如'2.0.240r' | 2.0引擎", "contents": "xmod.VERSION_NAME" },
        { "trigger": "xmod.HANDLER_ON_USER_EXIT \t | 2.0引擎", "contents": "xmod.HANDLER_ON_USER_EXIT" },
        { "trigger": "xmod.HANDLER_ON_RUNTIME_ERROR \t | 2.0引擎", "contents": "xmod.HANDLER_ON_RUNTIME_ERROR" },
        { "trigger": "xmod.SCREENCAP_POLICY_STANDARD \t | 2.0引擎", "contents": "xmod.SCREENCAP_POLICY_STANDARD" },
        { "trigger": "xmod.SCREENCAP_POLICY_AGGRESSIVE \t | 2.0引擎", "contents": "xmod.SCREENCAP_POLICY_AGGRESSIVE" },
        { "trigger": "xmod.SCREENCAP_POLICY \t | 2.0引擎", "contents": "xmod.SCREENCAP_POLICY" },
        { "trigger": "xmod.SCREENCAP_KEEP \t | 2.0引擎", "contents": "xmod.SCREENCAP_KEEP" },
        { "trigger": "xmod.setConfig(key, value) \t 设置引擎属性 | 2.0引擎", "contents": "xmod.setConfig('$0', '')" },
        { "trigger": "xmod.getConfig(key, defValue) return bool | string | number \t 获取引擎属性 | 2.0引擎", "contents": "xmod.getConfig('$0', '')" },
        { "trigger": "xmod.getPublicPath() return path \t 获取引擎公共目录 | 2.0引擎", "contents": "xmod.getPublicPath()" },
        { "trigger": "xmod.getPrivatePath() return path \t 获取脚本私有目录 | 2.0引擎", "contents": "xmod.getPrivatePath()" },
        { "trigger": "xmod.resolvePath(path) return absPath \t 目录转换 | 2.0引擎", "contents": "xmod.resolvePath(${1:path})" },
        { "trigger": "xmod.exit() \t 主动退出 | 2.0引擎", "contents": "xmod.exit()" },
        { "trigger": "xmod.restart() \t 主动重启 | 2.0引擎", "contents": "xmod.restart()" },
        { "trigger": "xmod.setOnEventCallback(event, callback) \t 设置事件回调 | 2.0引擎", "contents": "xmod.setOnEventCallback(EVENT_ON$0, cb)" },
        { "trigger": "xmod.EVENT_ON_USER_EXIT \t 监听用户主动停止脚本的回调处理 | 2.0引擎", "contents": "xmod.EVENT_ON_USER_EXIT" },
        { "trigger": "xmod.EVENT_ON_RUNTIME_ERROR \t 监听脚本运行时错误的回调处理 | 2.0引擎", "contents": "xmod.EVENT_ON_RUNTIME_ERROR" },
        { "trigger": "script.getUserInfo() return UserInfo, code\t  获取用户信息 | 2.0引擎", "contents": "local ${1:userInfo}, code = script.getUserInfo()" },
        { "trigger": "script.getScriptInfo() return ScriptInfo, code \t 获取脚本信息 | 2.0引擎", "contents": "local ${1:scriptInfo}, code = script.getScriptInfo()" },
        { "trigger": "script.getBulletinBoard(key, token) return content, code \t 获取脚本公告 | 2.0引擎", "contents": "local content, code = script.getBulletinBoard('$0', '')" },
        { "trigger": "script.getUIData(file) return string \t 获取ui目录资源内容 | 2.0引擎", "contents": "script.getUIData('$0')" },
        { "trigger": "script.getResData(file) return string \t 获取res目录资源内容 | 2.0引擎", "contents": "script.getResData('$0')" },
        { "trigger": "Image.ROTATION_CLOCKWISE_90 \t 将图像顺时针旋转90° | 2.0引擎", "contents": "Image.ROTATION_CLOCKWISE_90" },
        { "trigger": "Image.ROTATION_CLOCKWISE_180 \t 将图像顺时针旋转180° | 2.0引擎", "contents": "Image.ROTATION_CLOCKWISE_180" },
        { "trigger": "Image.ROTATION_CLOCKWISE_270 \t 将图像顺时针旋转270° | 2.0引擎", "contents": "Image.ROTATION_CLOCKWISE_270" },
        { "trigger": "Image.fromScreen(Rect) \t 从屏幕构造图像实例 | 2.0引擎", "contents": "Image.fromScreen($0)" },
        { "trigger": "Image.fromFile(path) \t 从文件构造图像实例 | 2.0引擎", "contents": "Image.fromFile($0)" },
        { "trigger": "Image:release() \t 释放图像 | 2.0引擎", "contents": "release()" },
        { "trigger": "Image:getSize() \t 获取图像尺寸 | 2.0引擎", "contents": "getSize()" },
        { "trigger": "Image:getWidth() \t 获取图像尺寸-宽 | 2.0引擎", "contents": "getWidth()" },
        { "trigger": "Image:getHeight() \t 获取图像尺寸-高 | 2.0引擎", "contents": "getHeight()" },
        { "trigger": "Image:setRotation(rotation) \t 旋转图像 | 2.0引擎", "contents": "setRotation($0)" },
        { "trigger": "Image:saveToFile(path) \t 把图像实例保存到本地 | 2.0引擎", "contents": "saveToFile($0)" },
        { "trigger": "Image:clip() \t 截取图像 | 2.0引擎", "contents": "clip()" },
        { "trigger": "Image:getColor(x, y) return Color3B \t 获取图像颜色值(Color3B) | 2.0引擎", "contents": "getColor($0)" },
        { "trigger": "Image:getColor(Point) return Color3B \t 获取图像颜色值(Color3B) | 2.0引擎", "contents": "getColor($0)" },
        { "trigger": "Image:getColorRGB(x, y) return color_r, color_g, color_b\t 获取图像颜色值(RGB) | 2.0引擎", "contents": " getColorRGB($0)" },
        { "trigger": "Image:getColorRGB(Point) return color_r, color_g, color_b\t 获取图像颜色值(RGB) | 2.0引擎", "contents": " getColorRGB($0)" },
        { "trigger": "Image:getColorHex(x, y) return color_hex \t 获取图像颜色值(integer) | 2.0引擎", "contents": "getColorHex($0)" },
        { "trigger": "Image:getColorHex(Point) return color_hex \t 获取图像颜色值(integer) | 2.0引擎", "contents": "getColorHex($0)" },
        { "trigger": "Image:binarize(diff) \t 图像二值化成table | 2.0引擎", "contents": "binarize($0)" },
        { "trigger": "screen.LANDSCAPE_RIGHT \t | 2.0引擎", "contents": "screen.LANDSCAPE_RIGHT" },
        { "trigger": "screen.LANDSCAPE_LEFT \t | 2.0引擎", "contents": "screen.LANDSCAPE_LEFT" },
        { "trigger": "screen.PORTRAIT \t | 2.0引擎", "contents": "screen.PORTRAIT" },
        { "trigger": "screen.PRIORITY_DEFAULT \t | 2.0引擎", "contents": "screen.PRIORITY_DEFAULT" },
        { "trigger": "screen.PRIORITY_LEFT_FIRST \t | 2.0引擎", "contents": "screen.PRIORITY_LEFT_FIRST" },
        { "trigger": "screen.PRIORITY_RIGHT_FIRST \t | 2.0引擎", "contents": "screen.PRIORITY_RIGHT_FIRST" },
        { "trigger": "screen.PRIORITY_UP_FIRST \t | 2.0引擎", "contents": "screen.PRIORITY_UP_FIRST" },
        { "trigger": "screen.PRIORITY_DOWN_FIRST \t | 2.0引擎", "contents": "screen.PRIORITY_DOWN_FIRST" },
        { "trigger": "screen.PRIORITY_HORIZONTAL_FIRST \t | 2.0引擎", "contents": "screen.PRIORITY_HORIZONTAL_FIRST" },
        { "trigger": "screen.PRIORITY_VERTICAL_FIRST \t | 2.0引擎", "contents": "screen.PRIORITY_VERTICAL_FIRST" },
        { "trigger": "screen.MOCK_NONE \t | 2.0引擎", "contents": "screen.MOCK_NONE" },
        { "trigger": "screen.MOCK_INPUT \t | 2.0引擎", "contents": "screen.MOCK_INPUT" },
        { "trigger": "screen.MOCK_INPUT_FIXED \t | 2.0引擎", "contents": "screen.MOCK_INPUT_FIXED" },
        { "trigger": "screen.MOCK_INPUT_RELATIVE \t | 2.0引擎", "contents": "screen.MOCK_INPUT_RELATIVE" },
        { "trigger": "screen.MOCK_OUTPUT \t | 2.0引擎", "contents": "screen.MOCK_OUTPUT" },
        { "trigger": "screen.MOCK_BOTH \t | 2.0引擎", "contents": "screen.MOCK_BOTH" },
        { "trigger": "screen.init(orientation) \t 初始化屏幕参数, 可选：screen.PORTRAIT | screen.LANDSCAPE_LEFT | screen.LANDSCAPE_RIGHT | 2.0引擎", "contents": "screen.init($0)" },
        { "trigger": "screen.getSize() return Size \t 获取屏幕分辨率尺寸 | 2.0引擎", "contents": "screen.getSize()" },
        { "trigger": "screen.getDPI() return dip \t 获取屏幕DPI | 2.0引擎", "contents": "screen.getDPI()" },
        { "trigger": "screen.capture(Rect) return Image \t 截取屏幕 | 2.0引擎", "contents": "screen.capture($0)" },
        { "trigger": "screen.keep(flag) \t 保持屏幕内容 | 2.0引擎", "contents": "screen.keep($0)" },
        { "trigger": "screen.getOrientation() return orientation \t 获取屏幕方向 | 2.0引擎", "contents": "screen.getOrientation()" },
        { "trigger": "screen.snapshot(path, Rect, quality) return res \t 截图并保存至本地 | 2.0引擎", "contents": "screen.snapshot($0)" },
        { "trigger": "screen.getColor(Point) return Color3B \t 获取屏幕颜色值(Color3B) | 2.0引擎", "contents": "screen.getColor($0)" },
        { "trigger": "screen.getColor(x, y) return Color3B \t 获取屏幕颜色值(Color3B) | 2.0引擎", "contents": "screen.getColor($0)" },
        { "trigger": "screen.getColorRGB(Point) return color_r, color_g, color_b \t 获取屏幕颜色值(RGB) | 2.0引擎", "contents": "screen.getColorRGB($0)" },
        { "trigger": "screen.getColorRGB(x, y) return color_r, color_g, color_b \t 获取屏幕颜色值(RGB) | 2.0引擎", "contents": "screen.getColorRGB($0)" },
        { "trigger": "screen:getColorHex(x, y) return color_hex \t 获取图像颜色值(integer) | 2.0引擎", "contents": "screen.getColorHex($0)" },
        { "trigger": "screen:getColorHex(Point) return color_hex \t 获取图像颜色值(integer) | 2.0引擎", "contents": "screen.getColorHex($0)" },
        { "trigger": "screen.matchColor(x, y, color, fuzziness) return res \t 比较颜色值 | 2.0引擎", "contents": "screen.matchColor($0)" },
        { "trigger": "screen.matchColor(Point, color, fuzziness) return res \t 比较颜色值 | 2.0引擎", "contents": "screen.matchColor($0)" },
        { "trigger": "screen.matchColors(color, globalFuzz) return res \t 比较颜色序列 | 2.0引擎", "contents": "screen.matchColors($0)" },
        { "trigger": "screen.findImage(rect, image, fuzzness, priority, ignoreColor) return Point \t 查找图像 | 2.0引擎", "contents": "screen.findImage($0)" },
        { "trigger": "screen.findColor(rect, color, globalFuzz, priority) return Point \t 查找颜色值/序列坐标 | 2.0引擎", "contents": "screen.findColor($0)" },
        { "trigger": "screen.findColors(rect, color, globalFuzz, priority, limit) return points \t 查找所有颜色值/序列坐标 | 2.0引擎", "contents": "screen.findColors($0)" },
        { "trigger": "screen.setMockMode(mode) \t 设置坐标转换模式,可选：screen.MOCK_NONE | screen.MOCK_INPUT | screen.MOCK_OUTPUT | screen.MOCK_BOTH（默认值） | 2.0引擎", "contents": "screen.setMockMode()" },
        { "trigger": "screen.setMockTransform(transform) \t  设置坐标转换回调函数 | 2.0引擎", "contents": "screen.setMockTransform($0)" },
        { "trigger": "touch.KEY_HOME \t Home键| 2.0引擎", "contents": "touch.KEY_HOME" },
        { "trigger": "touch.KEY_BACK \t 返回键（仅Android）| 2.0引擎", "contents": "touch.KEY_BACK" },
        { "trigger": "touch.KEY_MENU \t 菜单键（仅Android）| 2.0引擎", "contents": "touch.KEY_MENU" },
        { "trigger": "touch.KEY_POWER \t 电源键 | 2.0引擎", "contents": "touch.KEY_POWER" },
        { "trigger": "touch.KEY_VOLUME_UP \t 音量上键 | 2.0引擎", "contents": "touch.KEY_VOLUME_UP" },
        { "trigger": "touch.KEY_VOLUME_DOWN \t 音量下键 | 2.0引擎", "contents": "touch.KEY_VOLUME_DOWN" },
        { "trigger": "touch.down(index, Point) \t 模拟点击按下 | 2.0引擎", "contents": "touch.down(1, $0)" },
        { "trigger": "touch.down(index, x, y) \t 模拟点击按下 | 2.0引擎", "contents": "touch.down(1, $0)" },
        { "trigger": "touch.move(index, Point) \t 模拟点击滑动 | 2.0引擎", "contents": "touch.move(1, $0)" },
        { "trigger": "touch.move(index, x, y) \t 模拟点击滑动 | 2.0引擎", "contents": "touch.move(1, $0)" },
        { "trigger": "touch.up(index, Point) \t 模拟点击抬起 | 2.0引擎", "contents": "touch.up(1, $0)" },
        { "trigger": "touch.up(index, x, y) \t 模拟点击抬起 | 2.0引擎", "contents": "touch.up(1, $0)" },
        { "trigger": "touch.press(type, longPress) \t 模拟按键按下, 可选：KEY_HOME | KEY_BACK（仅Android）| KEY_MENU（仅Android）| KEY_POWER | KEY_VOLUME_UP | KEY_VOLUME_DOWN | 2.0引擎", "contents": "touch.press()" },
        { "trigger": "touch.doublePress(type) \t 模拟按键双击, 可选：KEY_HOME | KEY_BACK（仅Android）| KEY_MENU（仅Android）| KEY_POWER | KEY_VOLUME_UP | KEY_VOLUME_DOWN | 2.0引擎", "contents": "touch.doublePress($0)" },
        { "trigger": "touch.captureTap(count, timeoutMs) \t 捕获用户点击 | 2.0引擎", "contents": "touch.captureTap($0)" },
        { "trigger": "storage.put(key, value) \t 存储数据 | 2.0引擎", "contents": "storage.put('', $0)" },
        { "trigger": "storage.get(key, defValue) \t 提取数据 | 2.0引擎", "contents": "storage.get('', $0)" },
        { "trigger": "storage.commit() \t 提交数据缓到本地 | 2.0引擎", "contents": "storage.commit()" },
        { "trigger": "storage.undo() \t 撤销未提交的数据 | 2.0引擎", "contents": "storage.undo()" },
        { "trigger": "storage.purge() \t 清除所有数据 | 2.0引擎", "contents": "storage.purge()" },
        { "trigger": "task.execTimer(delayMs, callback, ...) \t 定时执行任务 | 2.0引擎", "contents": "task.execTimer($0)" },
        { "trigger": "task.execAsync(config, callback, content) \t 异步执行任务 | 2.0引擎", "contents": "task.execAsync({\n\t-- 指定httpget类型\n\ttype = \"httpget\",\n\t-- 注意请求的URL需要进行url编码\n\turl = urlencode(\"$0\"),\n\tcallback = function (result)\n\t\t-- 回调结果为table\n\t\tassert(type(result) == \"table\")\n\t\t-- 注意: 虽然请求会异步执行, 但回调函数依然在lua主线程执行, 不要在回调里执行其他阻塞操作\n\tend\n})" },
        { "trigger": "runtime.vibrate(durationMs) \t 模拟设备震动 | 2.0引擎", "contents": "runtime.vibrate($0)" },
        { "trigger": "runtime.readClipboard() return content \t 读取粘贴板 | 2.0引擎", "contents": "runtime.readClipboard()" },
        { "trigger": "runtime.writeClipboard(content) \t 写入粘贴板 | 2.0引擎", "contents": "runtime.writeClipboard($0)" },
        { "trigger": "runtime.inputText(content) \t 模拟输入文本，支持特殊字符：'#DEL#' | '#CLEAR#' | '#DONE#' | '#NEXT#' | '#GO#' | '\r' | '\n' | 2.0引擎", "contents": "runtime.inputText($0)" },
        { "trigger": "runtime.launchApp(appid) \t 启动应用 | 2.0引擎", "contents": "runtime.launchApp($0)" },
        { "trigger": "runtime.killApp(appid) \t 关闭应用 | 2.0引擎", "contents": "runtime.killApp($0)" },
        { "trigger": "runtime.isAppRunning(appid) return res \t 判断应用是否运行 | 2.0引擎", "contents": "runtime.isAppRunning()" },
        { "trigger": "runtime.getForegroundApp() return appid \t 获取前台应用包名 | 2.0引擎", "contents": "runtime.getForegroundApp()" },
        { "trigger": "runtime.openURL(url) \t 跳转到指定URL地址 | 2.0引擎", "contents": "runtime.openURL()" },
        { "trigger": "runtime.android.getSystemProperty(key) \t 获取Android系统属性 | 2.0引擎", "contents": "runtime.android.getSystemProperty($0)" },
        { "trigger": "runtime.ios.resetLockTimer() \t 重置iOS系统锁屏时间 | 2.0引擎", "contents": "runtime.ios.resetLockTimer()" },
        { "trigger": "UIContext:show() \t 显示UI界面 | 2.0引擎", "contents": "show()" },
        { "trigger": "UIContext:close() \t 关闭UI界面 | 2.0引擎", "contents": "close()" },
        { "trigger": "UIContext:getRootView() return UIView \t 获取根组件 | 2.0引擎", "contents": "getRootView()" },
        { "trigger": "UIContext:findView(tid) return UIView \t 搜索组件 | 2.0引擎", "contents": "findView($0)" },
        { "trigger": "UIContext:createView(layout) return UIView \t 动态创建组件 | 2.0引擎", "contents": "createView($0)" },
        { "trigger": "UIView:getID() return tid \t 获取组件标识 | 2.0引擎", "contents": "getID()" },
        { "trigger": "UIView:getType() return type \t 获取组件类型 | 2.0引擎", "contents": "getType()" },
        { "trigger": "UIView:getAttr(key) return attr \t 获取组件属性 | 2.0引擎", "contents": "getAttr($0)" },
        { "trigger": "UIView:getAttrs() return attrs \t 获取组件所有属性 | 2.0引擎", "contents": "getAttrs()" },
        { "trigger": "UIView:getStyle(key) return style \t 获取组件样式 | 2.0引擎", "contents": "getStyle($0)" },
        { "trigger": "UIView:getStyles() return styles \t 获取组件所有样式 | 2.0引擎", "contents": "getStyles()" },
        { "trigger": "UIView:setAttr(key, attr) \t 设置组件属性 | 2.0引擎", "contents": "setAttr($0)" },
        { "trigger": "UIView:setAttr(attrs) \t 设置组件属性 | 2.0引擎", "contents": "setAttr($0)" },
        { "trigger": "UIView:setStyle(key, style) \t 设置组件样式 | 2.0引擎", "contents": "setStyle($0)" },
        { "trigger": "UIView:setStyle(styles) \t 设置组件样式 | 2.0引擎", "contents": "setStyle($0)" },
        { "trigger": "UIView:subviewsCount() return count \t 获取组件的子组件数量 | 2.0引擎", "contents": "subviewsCount()" },
        { "trigger": "UIView:getSubview(index) return UIView \t 获取子组件 | 2.0引擎", "contents": "getSubview($0)" },
        { "trigger": "UIView:addSubview(subview, index) \t 添加子组件 | 2.0引擎", "contents": "addSubview($0)" },
        { "trigger": "UIView:removeSubview(index) \t 移除子组件 | 2.0引擎", "contents": "removeSubview()" },
        { "trigger": "UIView:removeFromParent() \t 将当前组件从父组件移除 | 2.0引擎", "contents": "removeFromParent()" },
        { "trigger": "UIView:setActionCallback(action, callback) \t 设置组件的回调函数 | 2.0引擎", "contents": "setActionCallback($0)" },
        { "trigger": "UIView:toJson() \t 将组件导出为Json格式字符串 | 2.0引擎", "contents": "toJson()" },
        { "trigger": "UI.TYPE.UNKNOWN \t | 2.0引擎", "contents": "UI.TYPE.UNKNOWN" },
        { "trigger": "UI.TYPE.CONTAINER \t | 2.0引擎", "contents": "UI.TYPE.CONTAINER" },
        { "trigger": "UI.TYPE.DIV \t | 2.0引擎", "contents": "UI.TYPE.DIV" },
        { "trigger": "UI.TYPE.TEXT \t | 2.0引擎", "contents": "UI.TYPE.TEXT" },
        { "trigger": "UI.TYPE.IMAGE \t | 2.0引擎", "contents": "UI.TYPE.IMAGE" },
        { "trigger": "UI.TYPE.SCROLLER \t | 2.0引擎", "contents": "UI.TYPE.SCROLLER" },
        { "trigger": "UI.TYPE.LIST \t | 2.0引擎", "contents": "UI.TYPE.LIST" },
        { "trigger": "UI.TYPE.SWITCH \t | 2.0引擎", "contents": "UI.TYPE.SWITCH" },
        { "trigger": "UI.TYPE.INPUT \t | 2.0引擎", "contents": "UI.TYPE.INPUT" },
        { "trigger": "UI.TYPE.TEXTAREA \t | 2.0引擎", "contents": "UI.TYPE.TEXTAREA" },
        { "trigger": "UI.TYPE.VIDEO \t | 2.0引擎", "contents": "UI.TYPE.VIDEO" },
        { "trigger": "UI.TYPE.INDICATOR \t | 2.0引擎", "contents": "UI.TYPE.INDICATOR" },
        { "trigger": "UI.TYPE.WEB \t | 2.0引擎", "contents": "UI.TYPE.WEB" },
        { "trigger": "UI.TYPE.LOADING \t | 2.0引擎", "contents": "UI.TYPE.LOADING" },
        { "trigger": "UI.ACTION.APPEAR \t | 2.0引擎", "contents": "UI.ACTION.APPEAR" },
        { "trigger": "UI.ACTION.DISAPPER \t | 2.0引擎", "contents": "UI.ACTION.DISAPPER" },
        { "trigger": "UI.ACTION.CLICK \t | 2.0引擎", "contents": "UI.ACTION.CLICK" },
        { "trigger": "UI.ACTION.LONG_PRESS \t | 2.0引擎", "contents": "UI.ACTION.LONG_PRESS" },
        { "trigger": "UI.ACTION.SWIPE \t | 2.0引擎", "contents": "UI.ACTION.SWIPE" },
        { "trigger": "UI.ACTION.INPUT \t | 2.0引擎", "contents": "UI.ACTION.INPUT" },
        { "trigger": "UI.PSEUDO.ACTIVE \t | 2.0引擎", "contents": "UI.PSEUDO.ACTIVE" },
        { "trigger": "UI.PSEUDO.FOCUS \t | 2.0引擎", "contents": "UI.PSEUDO.FOCUS" },
        { "trigger": "UI.PSEUDO.ENABLED \t | 2.0引擎", "contents": "UI.PSEUDO.ENABLED" },
        { "trigger": "UI.PSEUDO.DISABLED \t | 2.0引擎", "contents": "UI.PSEUDO.DISABLED" },
        { "trigger": "UI.TOAST.LENGTH_SHORT \t | 2.0引擎", "contents": "UI.TOAST.LENGTH_SHORT" },
        { "trigger": "UI.TOAST.LENGTH_LONG \t | 2.0引擎", "contents": "UI.TOAST.LENGTH_LONG" },
        { "trigger": "UI.toast(msg, length) \t Toast提示 length可选： LENGTH_SHORT | LENGTH_LONG | 2.0引擎", "contents": "UI.toast($0)" },
        { "trigger": "UI.createContext(layout, style) return UIContext \t 构建UI实例 | 2.0引擎", "contents": "UI.createContext($0)" },
        { "trigger": "UI.register(name, layout) \t 设置UI模板 | 2.0引擎", "contents": "UI.register($0)" },
    ]
}