{  
    // 这里需要根据不同语言进行修改后缀，这里是 .js,如果是其他语言只要把js改成例如 lua、php等
    "scope": "source.lua - keyword.control.lua - constant.language.lua - string",

    "completions":
    [
        { "trigger": "init(appid, rotate) \t初始化  rotate: 屏幕方向，0 - 竖屏，1 - Home键在右边，2 - Home键在左边", "contents": "init(${0:appid}, ${1:1})" },
        { "trigger": "touchDown(index, x, y) \t触摸按下", "contents": "touchDown(${0:1}, x, y)" },
        { "trigger": "touchMove(index, x, y) \t触摸移动", "contents": "touchMove(${0:1}, x, y)" },
        { "trigger": "touchUp(index, x, y) \t触摸抬起", "contents": "touchUp(${0:1}, x, y)" },
        { "trigger": "catchTouchPoint(touchCount) return x,y | results \t获取用户点击坐标", "contents": "local ${0:x, y} = catchTouchPoint()" },
        { "trigger": "findColor({left, top, right, bottom}, color0, degree, hdir, vdir, priority) return x, y \t区域多点找色", "contents": "local x, y = findColor($0)" },
        { "trigger": "findColors({left, top, right, bottom}, color0, degree, hdir, vdir, priority) return points \t区域多点找色", "contents": "local points = findColors($0)" },
        { "trigger": "findColorInRegionFuzzy(color, degree, x1, y1, x2, y2,hdir,vdir) return x, y \t模糊区域找色（推荐使用findColor代替）", "contents": "local x, y = findColorInRegionFuzzy($0)" },
        { "trigger": "findMultiColorInRegionFuzzy2(color, {{posandcolor}}, degree, x1, y1, x2, y2,hdir,vdir) return x, y \t区域多点找色（推荐使用findColor代替）", "contents": "local x, y = findMultiColorInRegionFuzzy2($0)" },
        { "trigger": "findMultiColorInRegionFuzzyExt(color, posandcolor, degree, x1, y1, x2, y2,hdir,vdir) return points \t高级区域多点找色（推荐使用findColors代替）", "contents": "local points = findMultiColorInRegionFuzzyExt($0)" },
        { "trigger": "findMultiColorInRegionFuzzyExt2(color, {{posandcolor}}, degree, x1, y1, x2, y2,hdir,vdir) return points \t高级区域多点找色（推荐使用findColors代替）", "contents": "local points = findMultiColorInRegionFuzzyExt2($0)" },
        { "trigger": "getColor(x, y) return color \t获取屏幕某点颜色值", "contents": "local color = getColor(${0:x}, y)" },
        { "trigger": "getColorRGB(x, y) return color_r, color_g, color_b \t获取颜色RGB值", "contents": "local r, g, b = getColorRGB($0, y)" },
        { "trigger": "findImageInRegionFuzzy(picpath, degree, x1, y1, x2, y2, alpha) return x, y \t模糊区域找图(不推荐,推荐用findColor或findColors)", "contents": "local x, y = findImageInRegionFuzzy($0)" },
        { "trigger": "snapshot(picname, x1, y1, x2, y2, quality) \t截图: 截取屏幕中指定区域的图像并生成指定格式的图片文件", "contents": "snapshot($0)" },
        { "trigger": "keepScreen(flag) \t保持屏幕", "contents": "keepScreen(${0:true})" },
        { "trigger": "inputText(string) \t向输入框中输入文本: #CLEAR# 删除输入框中的文字, #ENTER# 回车", "contents": "inputText($0)" },
        { "trigger": "createOcrDict(dict) return index \t加载自定义的点阵字库", "contents": "local dict = createOcrDict($0)" },
        { "trigger": "ocrText(index, x1, y1, x2, y2, {\"c0-c1\"} , sim, flag, dir) return result \t文字点阵化识别", "contents": "local txt = ocrText($0)" },
        { "trigger": "createOCR({ type = \"tesseract\", mode = mode, path = path, lang = lang}) return ocr, msg \t载入高级文字识别字库(集成tesserOCR)", "contents": "local ocr, msg = createOCR({type=\"tesseract\", path=\"res/\", lang=\"$0\"})" },
        { "trigger": "ocr:getText({ psm = psm, rect = {x1, y1, x2, y2}, diff = {diff}, data = data, whitelist = whitelist, blacklist = blacklist }) return code, text \t使用已载入的高级文字识别字库进行识别", "contents": "ocr:getText($0)" },
        { "trigger": "ocr:release() \t主动释放OCR字库，避免内存峰值过高导致被系统强杀 ", "contents": "ocr:release()" },
        { "trigger": "binarizeImage({ rect = {x1, y1, x2, y2}, diff = {diff} })\t 二值化图片转换为table", "contents": "binarizeImage(rect = ${1:rect}, diff = ${2:diff})" },
        { "trigger": "runApp(appid) return flag \t 运行应用", "contents": "runApp(${1:appid})" },
        { "trigger": "closeApp(appid) \t 关闭应用", "contents": "closeApp(${1:appid})" },
        { "trigger": "appIsRunning(appid) return flag \t 检测应用是否运行", "contents": "appIsRunning(${1:appid})" },
        { "trigger": "isFrontApp(appid) return flag \t 判断是否为前台应用", "contents": "isFrontApp(${1:appid})" },
        { "trigger": "frontAppName() return appid \t 获取前台应用识别ID", "contents": "local appid = frontAppName()" },
        { "trigger": "showUI(ui_json) return ret,results \t 显示一个自定义的界面，用来接收用户相关的自定义配置", "contents": "local ret,results = showUI($0)" },
        { "trigger": "getUIContent(path) return content \t 获取json文件(自定义UI,UI目录下)的内容", "contents": "local content = getUIContent($0)" },
        { "trigger": "resetUIConfig(file) \t 重置UI默认选项", "contents": "resetUIConfig($0)" },
        { "trigger": "getScreenSize() return width,height \t 获取屏幕分辨率", "contents": "${1:width,height} = getScreenSize()" },
        { "trigger": "setScreenScale(width, height, scale) \t 设置屏幕缩放", "contents": "setScreenScale(width, height, scale)" },
        { "trigger": "mTime() return t \t 获取Unix时间戳, 从1970年到现在经过的毫秒数", "contents": "local ${1:t} = mTime()" },
        { "trigger": "getNetTime() return t \t 获取网络时间, 获取GMT时区从1970年到现在经过的秒数 ", "contents": "local t = getNetTime()" },
        { "trigger": "pressHomeKey() \t 模拟主屏幕按键", "contents": "pressHomeKey()" },
        { "trigger": "doublePressHomeKey() \t 双击HOME键", "contents": "doublePressHomeKey()" },
        { "trigger": "pressKey(keyname,mode) return ret \t 导航栏按键", "contents": "pressKey(${1:'BACK'},false)" },
        { "trigger": "setWifiEnable(flag) return ret \t 设置无线局域网开关", "contents": "setWifiEnable(${1:true})" },
        { "trigger": "setAirplaneMode(flag) return ret \t 设置飞行模式开关", "contents": "setAirplaneMode(${1:true})" },
        { "trigger": "setBTEnable(flag) return ret \t 设置蓝牙开关", "contents": "setBTEnable(${1:true})" },
        { "trigger": "lockDevice() \t 锁定设备", "contents": "lockDevice()" },
        { "trigger": "unlockDevice() \t 解锁设备", "contents": "unlockDevice()" },
        { "trigger": "deviceIsLock() return flag \t 设备锁定状态", "contents": "deviceIsLock()" },
        { "trigger": "vibrator() \t 手机振动", "contents": "vibrator()" },
        { "trigger": "resetIDLETimer() \t 重置锁屏时间", "contents": "resetIDLETimer()" },
        { "trigger": "resetScreenScale() \t 取消屏幕缩放", "contents": "resetScreenScale()" },
        { "trigger": "playAudio(file) \t 播放音频", "contents": "playAudio(${1:file})" },
        { "trigger": "stopAudio() \t 停止播放音频", "contents": "stopAudio()" },
        { "trigger": "setTimer(time,func,arg1,arg2,...) \t 规定时间之后调用指定函数", "contents": "setTimer($0)" },
        { "trigger": "setSysConfig(key,value) \t 设置系统参数", "contents": "setSysConfig($0)" },
        { "trigger": "mSleep(interval) \t 延时", "contents": "mSleep($0)" },
        { "trigger": "toast(text) \t 提示", "contents": "toast(\"$0\")" },
        { "trigger": "dialog(text, time) \t 提示框", "contents": "dialog(\"$0\", 0)" },
        { "trigger": "dialogRet(text, cbtn, btn1, btn2, time) return choice \t 带按钮的对话框", "contents": "local c = dialogRet(\"$0\", \"\", \"\", \"\", 0)" },
        { "trigger": "dialogInput(title, format, btn) return text_a, text_b \t 带参数的对话框", "contents": "local text = dialogInput(\"$0\", \"\", \"\")" },
        { "trigger": "sysLog(text) \t 系统日志", "contents": "sysLog(\"$0\")" },
        { "trigger": "fileLogWrite(file,date,tag,msg) \t 输出日志到文件", "contents": "fileLogWrite(\"$0\",1,\"INFO\",\"\")" },
        { "trigger": "getCloudContent(key,token,default_msg) return content, err \t 获取云端自定义公告", "contents": "local content, err = getCloudContent(\"$0\", \"此处十六位调试口令\", \"默认值\")" },
        { "trigger": "setStringConfig(key,string) \t 存字符串", "contents": "setStringConfig(\"$0\",\"\")" },
        { "trigger": "getStringConfig(key,default_string) \t 取字符串", "contents": "local str = getStringConfig(\"$0\",\"\")" },
        { "trigger": "setNumberConfig(key,number) \t 存入数值", "contents": "setNumberConfig(\"$0\", 0)" },
        { "trigger": "getNumberConfig(key,default_num) \t 读取数值", "contents": "local num = getNumberConfig(\"$0\", 0)" },
        { "trigger": "readPasteboard() \t 读取剪贴板", "contents": "local ${1:pb} = readPasteboard()" },
        { "trigger": "writePasteboard(text) \t 写入剪贴板", "contents": "writePasteboard(\"$0\")" },
        { "trigger": "lua_exit() \t 退出脚本执行", "contents": "lua_exit()" },
        { "trigger": "lua_restart() \t 重载脚本", "contents": "lua_restart()" },
        { "trigger": "onBeforeUserExit() \t 脚本运行终止回调", "contents": "function onBeforeUserExit()\n\t$0\nend" },
        { "trigger": "getEngineVersion() return ver \t 获取脚本引擎的版本号", "contents": "local ${1:ver} = getEngineVersion()" },
        { "trigger": "getOSType() return ostype \t 获取系统类型, android系统返回“android”,iOS系统返回“iOS”", "contents": "local ${1:ver} = getOSType()" },
        { "trigger": "isPrivateMode() return ver \t 获取系统环境类型, 1-越狱/ROOT环境；0-免越狱/免ROOT环境", "contents": "isPrivateMode()" },
        { "trigger": "getSystemProperty(key) return value \t 获取系统常量属性", "contents": "local value = getSystemProperty('$0')" },
        { "trigger": "getLocalInfo() return lang \t 获取当前系统语言属性", "contents": "local ${1:lang} = getLocalInfo()" },
        { "trigger": "getUserID() return uid \t 获取用户ID", "contents": "local ${1:uid} = getUserID()" },
        { "trigger": "getScriptID() return sid \t 获取脚本ID", "contents": "local ${1:sid} = getScriptID()" },
        { "trigger": "getScreenDPI() return dpi \t 获取当前设备屏幕DPI", "contents": "local ${1:dpi} = getScreenDPI()" },
        { "trigger": "getDeviceIMEI() return imei \t 获取当前设备IMEI码", "contents": "local ${1:imei} = getDeviceIMEI()" },
        { "trigger": "getDeviceIMSI() return imsi \t 获取当前设备IMSI码", "contents": "local ${1:imsi} = getDeviceIMSI()" },
        { "trigger": "getDeviceUUID() return uuid \t 获取当前设备UUID", "contents": "local ${1:uuid} = getDeviceUUID()" },
        { "trigger": "getBatteryLevel() return charge,level \t 获取电池状态", "contents": "local ${1:charge},level = getBatteryLevel()" },
        { "trigger": "getScreenDirection() return ret \t 获取屏幕方向, Android:0-竖屏, 1-橫屏; iOS:0-竖屏，1-横屏(Home右），2-横屏(Home左)，-1(Unknow)", "contents": "local ${1:ret} = getScreenDirection()" },
        { "trigger": "getUserCredit() return buyState,validTime,res \t 获取用户付费类型和套餐剩余时间", "contents": "local buyState,validTime,res=getUserCredit()" },
        { "trigger": "getRuntimeMode() return mode \t 获取脚本运行模式（安卓专用）, 0 - 通用模式（当做“免root免激活”处理）,1 - 低版本兼容模式（当做“免root免激活”处理）,2 - 极客模式（root或者激活）", "contents": "local ${1:mode} = getRuntimeMode()" },
        { "trigger": "getProduct() return product_id \t 获取当前运行产品", "contents": "local product_id = getProduct()" },
        { "trigger": "createHUD() return id \t 创建HUD内容", "contents": "local ${1:id} = createHUD()" },
        { "trigger": "showHUD(id,text,size,color,bg,pos,x,y,width,height) \t 显示HUD内容", "contents": "showHUD(${1:id},\"\",18,\"\",\"\",0,x,y,width,height)" },
        { "trigger": "hideHUD(id) \t 隐藏HUD内容", "contents": "hideHUD(${1:id})" },
        { "trigger": "asyncExec({ type, immediate, url, headers, content, callback }) \t 异步网络请求", "contents": "asyncExec({ \n\ttype = \"httpget\", -- [string]    指定httpget类型\n\timmediate = false, -- [bool] 默认false, 设置true会独立开启线程执行任务\n\turl = urlencode(\"$0\"),-- [string]    请求的URL地址，出现中文字符时需要使用urlencode进行编码\n\tcallback = function (result)\n\t\t--返回数据格式: { code = [int]错误码, data = [string]服务器返回数据 }\n\t\t-- code -1:  请求出错  -2:  请求超时  -3:  强制关闭  其他: 同http status code\n\t\t-- 注意: 虽然请求会异步执行, 但回调函数依然在lua主线程执行, 不要在回调里执行其他阻塞操作\n\t\t\n\tend\n})" },
        { "trigger": "os.time()\t获取系统时间，单位秒", "contents": "os.time()" },
    ]
}